INSTALLATION DAN RUN
1.Clone Repo 
git clone https://github.com/indri345/backend.git
cd urban-farming-backend

2.Install dependency
npm install

3.Set environment variable(.env)
PORT=4000
DB_HOST=localhost
DB_PORT=5432
DB_NAME=urban_farming
DB_USER=postgres
DB_PASS=yourpassword
JWT_SECRET=yourjwtsecret

4.Set up database
npx sequelize-cli db:create
npx sequelize-cli db:migrate

5.Runserver
npm start

STRUKTUR DATABASE
Tabel utama:
1.users
id (PK)
name
email
password (hashed)
role (admin/farmer/agronomist)
is_verified

2.roles
id (PK)
name (admin, farmer, agronomist)

3.plants
id (PK)
name
type
owner_id (FK ke users)

4.cares
id (PK)
plant_id (FK ke plants)
farmer_id (FK ke users)
start_date
last_date
fertilizer_type
notes

TEKNOLOGI DAN LIBRARY UTAMA
1.Backend: Node.js + Express.js
2.Database: PostgreSQL
3.ORM: Sequelize
4.Auth: JWT (jsonwebtoken), bcrypt (hashing password)
5.Validation: Custom validator (utils/validate.js)
6.Middleware: Role-based authorization (admin, farmer, agronomist)
7.Testing API: Thunder Client/Postman
● Register:
POST http://localhost:4000/auth/register
{
  "username": "admin1",
  "email": "admin1@mail.com",
  "password": "secret123",
  "role": "admin"
}

● Login:
POST http://localhost:4000/auth/login
{
  "username": "admin1",
  "password": "secret123"
}

● Admin buat Tanaman (CRUD Plants – Create):
POST http://localhost:4000/admin/plants
Headers: Authorization: Bearer <TOKEN_ADMIN>
{
  "name": "Cabai Rawit",
  "species": "Capsicum frutescens",
  "location": "Greenhouse A"
}

● Register dan login farmer sama seperti login as admin
Jika ingin lihat tanaman, claim tanaman, care tanaman farmer, 
lihat tanaman farmer maka farmer harus login dulu.

● Farmer lihat tanaman yang bisa diklaim:
GET http://localhost:4000/farmer/plants/available
Headers: Authorization: Bearer <TOKEN_FARMER>

● Farmer klaim tanaman + catat tanggal tanam
Misal mau klaim plant id = 1.
POST http://localhost:4000/farmer/plants/1/claim
Headers: Authorization: Bearer <TOKEN_FARMER>
{
  "planted_at": "2025-08-25"
}

● Lihat tanaman milik saya(farmer)
GET http://localhost:4000/farmer/plants/mine
Headers: Authorization: Bearer <TOKEN_FARMER>

● CRUD Perawatan (Care) — Farmer HANYA untuk tanamannya sendiri
Create Care:
POST http://localhost:4000/care
Headers: Authorization: Bearer <TOKEN_FARMER>
{
  "plant_id": 1,
  "start_date": "2025-08-26",
  "last_date": "2025-08-26",
  "fertilizer_type": "NPK 16-16-16",
  "notes": "Penyiraman pagi, pemupukan ringan"
}

● List Care:
GET http://localhost:4000/care
Headers: Authorization: Bearer <TOKEN_FARMER>
Farmer: hanya lihat care miliknya.
Admin (jika pakai token admin): lihat semua care.

● Detail Care:
GET http://localhost:4000/care/1
Headers: Authorization: Bearer <TOKEN_FARMER>

● Update Care:
PUT http://localhost:4000/care/1
Headers: Authorization: Bearer <TOKEN_FARMER>
{
  "last_date": "2025-08-27",
  "fertilizer_type": "Kompos Organik",
  "notes": "Ganti pupuk jadi organik"
}

● Delete Care
DELETE http://localhost:5000/care/1
Headers: Authorization: Bearer <TOKEN_FARMER>

DAFTAR FITUR YANG SELESAI 
Stage 1 — Role & Authentication & Authorization
(Backend)
Fitur Wajib:
● Register dan login.
● User memiliki role: admin, farmer, agronomist
Bonus:
● Middleware untuk role-based authorization.

Stage 2 — Tanaman dan Perawatan 
Fitur Wajib:
● Admin dapat mengelola data Tanaman (CRUD)
● Tanaman bisa dimiliki oleh farmer
● Farmer dapat mencatat tanggal tanam
● Perawatan dapat dikelola (CRUD)
● Farmer hanya boleh CRUD perawatan pada tanaman yang dimilikinya
Bonus:
● Menggunakan ValidatorJs
